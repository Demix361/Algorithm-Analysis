#include <iostream>
#include <ctime>
#include <cstdlib>
#include <fstream>
#include <iomanip>
#include <limits>
#include "matrix.h"
#include "total_search.h"
#include "aco.h"
#include "print.h"

Matrix get_rand_matrix(int n);

void research_test(std::string file_name) {
    std::cout << std::endl << "--[ " << file_name << " ]--" << std::endl;
    std::ofstream fout(file_name);

    int n = 10;

    // ( 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 )
    Matrix dist0 = {
        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
        { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 },
        { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 },
        { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9 },
        { 5, 2, 3, 4, 0, 1, 6, 7, 8, 9 },
        { 6, 2, 3, 4, 5, 0, 1, 7, 8, 9 },
        { 7, 2, 3, 4, 5, 6, 0, 1, 8, 9 },
        { 8, 2, 3, 4, 5, 6, 7, 0, 1, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 8, 0, 1 },
        { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 },
    };

    // ( 1 -> 2 -> 4 -> 6 -> 8 -> 10 -> 3 -> 5 -> 7 -> 9 )
    Matrix dist1 = {
        { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 },
        { 2, 0, 3, 1, 4, 5, 6, 7, 8, 9 },
        { 3, 2, 0, 4, 1, 5, 6, 7, 8, 9 },
        { 2, 3, 4, 0, 5, 1, 6, 7, 8, 9 },
        { 5, 2, 3, 4, 0, 6, 1, 7, 8, 9 },
        { 6, 2, 3, 4, 5, 0, 7, 1, 8, 9 },
        { 7, 7, 3, 4, 5, 6, 0, 8, 1, 9 },
        { 8, 2, 3, 4, 5, 6, 7, 0, 9, 1 },
        { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
    };

    // ( 1 -> 10 -> 2 -> 9 -> 3 -> 8 -> 4 -> 7 -> 5 -> 6 )
    Matrix dist2 = {
        { 0, 9, 2, 3, 4, 5, 6, 7, 8, 1 },
        { 2, 0, 9, 3, 4, 5, 6, 7, 1, 9 },
        { 3, 2, 0, 9, 4, 5, 6, 1, 8, 9 },
        { 2, 3, 4, 0, 9, 5, 1, 7, 8, 9 },
        { 5, 2, 3, 4, 0, 1, 6, 7, 8, 9 },
        { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
        { 7, 2, 3, 4, 1, 6, 0, 9, 8, 9 },
        { 8, 2, 3, 1, 5, 6, 7, 0, 9, 9 },
        { 9, 2, 1, 4, 5, 6, 7, 8, 0, 9 },
        { 9, 1, 3, 4, 5, 6, 7, 8, 9, 0 },
    };

    // ( 1 -> 2 -> 3 -> 4 -> 5 -> 10 -> 9 -> 8 -> 7 -> 6 )
    Matrix dist3 = {
        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
        { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 },
        { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 },
        { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9 },
        { 5, 2, 3, 4, 0, 9, 6, 7, 8, 1 },
        { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
        { 7, 2, 3, 4, 5, 1, 0, 9, 8, 9 },
        { 8, 2, 3, 4, 5, 6, 1, 0, 9, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 1, 0, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
    };

    // ( 1 -> 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 )
    Matrix dist4 = {
        { 0, 9, 2, 3, 4, 5, 6, 7, 8, 1 },
        { 1, 0, 9, 3, 4, 5, 6, 7, 8, 9 },
        { 3, 1, 0, 9, 4, 5, 6, 7, 8, 9 },
        { 2, 3, 1, 0, 9, 5, 6, 7, 8, 9 },
        { 5, 2, 3, 1, 0, 9, 6, 7, 8, 9 },
        { 6, 2, 3, 4, 1, 0, 9, 7, 8, 9 },
        { 7, 2, 3, 4, 5, 1, 0, 9, 8, 9 },
        { 8, 2, 3, 4, 5, 6, 1, 0, 9, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 1, 0, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
    };

    // ( 1 -> 7 -> 3 -> 4 -> 9 -> 8 -> 6 -> 10 -> 5 -> 2 )
    Matrix dist5 = {
        { 0, 9, 2, 3, 4, 5, 1, 7, 8, 9 },
        { 1, 0, 9, 3, 4, 5, 6, 7, 8, 9 },
        { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 },
        { 2, 3, 4, 0, 9, 5, 6, 7, 1, 9 },
        { 5, 1, 3, 4, 0, 9, 6, 7, 8, 9 },
        { 6, 2, 3, 4, 5, 0, 9, 7, 8, 1 },
        { 7, 2, 1, 4, 5, 6, 0, 9, 8, 9 },
        { 8, 2, 3, 4, 5, 1, 7, 0, 9, 9 },
        { 9, 2, 3, 4, 5, 6, 7, 1, 0, 9 },
        { 9, 2, 3, 4, 1, 6, 7, 8, 9, 0 },
    };

    // ( 1 -> 4 -> 8 -> 2 -> 5 -> 9 -> 3 -> 7 -> 10 -> 6 )
    Matrix dist6 = {
        { 0, 9, 2, 1, 4, 5, 6, 7, 8, 9 },
        { 2, 0, 9, 3, 1, 5, 6, 7, 8, 9 },
        { 3, 2, 0, 9, 4, 5, 1, 7, 8, 9 },
        { 2, 3, 4, 0, 9, 5, 6, 1, 8, 9 },
        { 5, 2, 3, 4, 0, 9, 6, 7, 1, 9 },
        { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
        { 7, 2, 3, 4, 5, 6, 0, 9, 8, 1 },
        { 8, 1, 3, 4, 5, 6, 7, 0, 9, 9 },
        { 9, 2, 1, 4, 5, 6, 7, 8, 0, 9 },
        { 9, 2, 3, 4, 5, 1, 7, 8, 9, 0 },
    };

    std::vector<Matrix> data = {
        dist0,
        dist1,
        dist2,
        dist3,
        dist4,
        dist5,
        dist6
    };

    int size = data.size();

    std::vector<double> ans(size, -1);
    std::vector<int> ts_way(n, -1);
    for (int i = 0; i < size; ++i) {
        ans[i] = total_search(data[i], ts_way);
    }

    std::vector<int> aco_way(n, -1);
    const int num = 5;
    const double eps = 1e-3;

    double aco_len = -1;
    const int w = 9;

    fout << std::setw(w)
    << "alpha" << std::setw(w)
    << "rho" << std::setw(w)
    << "t" << std::setw(w)
    << "total" << std::setw(w)
    << "aco_min" << std::setw(w)
    << "aco_max" << std::endl;

    for (int i = size - 2; i < size; ++i) {

        fout << "{ DATA " << i + 1 << " }" << std::endl;
        std::cout << i + 1 << std::endl;

        for (double alpha = 0; (alpha - 1) <= eps; alpha += 0.1) {  // alpha e [0; 1]
            for (double rho = 0.1; (rho - 1) < eps; rho += 0.1) {   // pho e [0; 1)
                int step = 10;
                for (int t = 10; t < 300; t += step) {
                    if (200 == t) {
                        step = 50;
                    }

                    double aco_min = std::numeric_limits<double>::max();
                    double aco_max = std::numeric_limits<double>::min();

                    for (int j = 0; j < num; ++j) {
                        aco_len = aco(data[i], aco_way, alpha, rho, t);
                        aco_min = std::min(aco_len, aco_min);
                        aco_max = std::max(aco_len, aco_max);
                    }

                    fout << std::setw(w)
                    << alpha << std::setw(w)
                    << rho << std::setw(w)
                    << t << std::setw(w)
                    << ans[i] << std::setw(w)
                    << aco_min << std::setw(w)
                    << aco_max << std::endl;

                    if (aco_min == ans[i] && aco_max == ans[i]) {
                        t = 1000;
                    }
                }
            }
        }
    }

    fout.close();
}

void latex_matr(const Matrix &d) {
    int size = d.size();

    std::cout << "\\begin{bmatrix}" << std::endl;
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            if (j == size - 1) {
                std::cout << int(d[i][j]) << "\\\\\n";
            } else {
                std::cout << int(d[i][j]) << "& ";
            }
        }
    }

    std::cout << "\\end{bmatrix}" << std::endl;
}

void latex_tbl(const Matrix &d) {
    int size = d.size();

    std::cout << ";";
    for (int i = 1; i <= size; ++i) {
        std::cout << i << ";";
    }

    std::cout << std::endl;
    for (int i = 0; i < size; ++i) {
        std::cout << "{\\bf " << i + 1 << "}& ";
        for (int j = 0; j < size; ++j) {
            if (j == size - 1) {
                std::cout << int(d[i][j]) << "\\\\\n\\hline" << std::endl;
            } else {
                std::cout << int(d[i][j]) << " & ";
            }
        }
    }

    std::cout << std::endl;
}

//int main() {
//    // research_test("TEST_56.txt");
//    int n = 10;
//    // Matrix dist = {
//    //     { 0, 9, 2, 1, 4, 5, 6, 7, 8, 9 },
//    //     { 2, 0, 9, 3, 1, 5, 6, 7, 8, 9 },
//    //     { 3, 2, 0, 9, 4, 5, 1, 7, 8, 9 },
//    //     { 2, 3, 4, 0, 9, 5, 6, 1, 8, 9 },
//    //     { 5, 2, 3, 4, 0, 9, 6, 7, 1, 9 },
//    //     { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
//    //     { 7, 2, 3, 4, 5, 6, 0, 9, 8, 1 },
//    //     { 8, 1, 3, 4, 5, 6, 7, 0, 9, 9 },
//    //     { 9, 2, 1, 4, 5, 6, 7, 8, 0, 9 },
//    //     { 9, 2, 3, 4, 5, 1, 7, 8, 9, 0 },
//    // };

//// ( 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 )
//    Matrix dist0 = {
//        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
//        { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 },
//        { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 },
//        { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9 },
//        { 5, 2, 3, 4, 0, 1, 6, 7, 8, 9 },
//        { 6, 2, 3, 4, 5, 0, 1, 7, 8, 9 },
//        { 7, 2, 3, 4, 5, 6, 0, 1, 8, 9 },
//        { 8, 2, 3, 4, 5, 6, 7, 0, 1, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 8, 0, 1 },
//        { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 },
//    };

//    // ( 1 -> 2 -> 4 -> 6 -> 8 -> 10 -> 3 -> 5 -> 7 -> 9 )
//    Matrix dist1 = {
//        { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9 },
//        { 2, 0, 3, 1, 4, 5, 6, 7, 8, 9 },
//        { 3, 2, 0, 4, 1, 5, 6, 7, 8, 9 },
//        { 2, 3, 4, 0, 5, 1, 6, 7, 8, 9 },
//        { 5, 2, 3, 4, 0, 6, 1, 7, 8, 9 },
//        { 6, 2, 3, 4, 5, 0, 7, 1, 8, 9 },
//        { 7, 7, 3, 4, 5, 6, 0, 8, 1, 9 },
//        { 8, 2, 3, 4, 5, 6, 7, 0, 9, 1 },
//        { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
//    };

//    // ( 1 -> 10 -> 2 -> 9 -> 3 -> 8 -> 4 -> 7 -> 5 -> 6 )
//    Matrix dist2 = {
//        { 0, 9, 2, 3, 4, 5, 6, 7, 8, 1 },
//        { 2, 0, 9, 3, 4, 5, 6, 7, 1, 9 },
//        { 3, 2, 0, 9, 4, 5, 6, 1, 8, 9 },
//        { 2, 3, 4, 0, 9, 5, 1, 7, 8, 9 },
//        { 5, 2, 3, 4, 0, 1, 6, 7, 8, 9 },
//        { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
//        { 7, 2, 3, 4, 1, 6, 0, 9, 8, 9 },
//        { 8, 2, 3, 1, 5, 6, 7, 0, 9, 9 },
//        { 9, 2, 1, 4, 5, 6, 7, 8, 0, 9 },
//        { 9, 1, 3, 4, 5, 6, 7, 8, 9, 0 },
//    };

//    // ( 1 -> 2 -> 3 -> 4 -> 5 -> 10 -> 9 -> 8 -> 7 -> 6 )
//    Matrix dist3 = {
//        { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
//        { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9 },
//        { 3, 2, 0, 1, 4, 5, 6, 7, 8, 9 },
//        { 2, 3, 4, 0, 1, 5, 6, 7, 8, 9 },
//        { 5, 2, 3, 4, 0, 9, 6, 7, 8, 1 },
//        { 1, 2, 3, 4, 5, 0, 9, 7, 8, 9 },
//        { 7, 2, 3, 4, 5, 1, 0, 9, 8, 9 },
//        { 8, 2, 3, 4, 5, 6, 1, 0, 9, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 1, 0, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
//    };

//    // ( 1 -> 10 -> 9 -> 8 -> 7 -> 6 -> 5 -> 4 -> 3 -> 2 )
//    Matrix dist4 = {
//        { 0, 9, 2, 3, 4, 5, 6, 7, 8, 1 },
//        { 1, 0, 9, 3, 4, 5, 6, 7, 8, 9 },
//        { 3, 1, 0, 9, 4, 5, 6, 7, 8, 9 },
//        { 2, 3, 1, 0, 9, 5, 6, 7, 8, 9 },
//        { 5, 2, 3, 1, 0, 9, 6, 7, 8, 9 },
//        { 6, 2, 3, 4, 1, 0, 9, 7, 8, 9 },
//        { 7, 2, 3, 4, 5, 1, 0, 9, 8, 9 },
//        { 8, 2, 3, 4, 5, 6, 1, 0, 9, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 1, 0, 9 },
//        { 9, 2, 3, 4, 5, 6, 7, 8, 1, 0 },
//    };

//    Matrix dist = dist4;

//    latex_tbl(dist);

//    std::vector<int> ts_way(n, -1);
//    int ts_len = -1;

//    ts_len = total_search(dist, ts_way);

//    board();
//    std::cout << "Way length : " << ts_len << std::endl;
//    board();

//    print_way(ts_way);
    

//    return 0;
//}
